---

- name: install packages for OCP install
  vars:
    pkgs:
      - ansible-2.6.6
      - openshift-ansible
      - vim
      - tmux
      - httpd-tools
      - https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
  package: name={{ pkgs }} state=present

- name: disable epel by default installations
  lineinfile:
    path: /etc/yum.repos.d/epel.repo
    regexp: '^enabled=1'
    line: 'enabled=0'

- name: install certbot from epel
  yum:
    name:
      - certbot
      - python2-certbot-dns-route53
    enablerepo: epel
    state: present

- name: Check if let's encrypt is already done on previous runs
  stat:
    path: "/etc/letsencrypt/live/{{ api_fqdn }}/fullchain.pem"
  register: cert_exists

- name: Lets encrypt cert for ocp
  block:

    - name: create awx secrets
      file:
        path: /root/.aws
        state: directory
        mode: 0600

    - copy:
        dest: /root/.aws/config
        mode: 0600
        content: |
          [default]
          aws_access_key_id={{aws_access_key_id}}
          aws_secret_access_key={{aws_secret_access_key}}

    - name: get let's encrypt cert
      command: >
        certbot certonly --dns-route53 --non-interactive --agree-tos
        --server https://acme-v02.api.letsencrypt.org/directory
        -m "{{ letsencrypt_email }}"
        -d "{{ api_fqdn }}" -d "{{apps_fqdn}}" -d "*.{{apps_fqdn}}"
      args:
        creates: "/etc/letsencrypt/live/{{ api_fqdn }}/fullchain.pem"

    - name: put let's encrypt to renew certs periodicly
      cron:
        name: "renew certbot certs"
        minute: "20"
        hour: "02"
        weekday: "2"
        job: "certbot renew &> /dev/null"

  when:
    # we do let's encrypt if aws keys are provided, and we do it only once
    - aws_access_key_id is defined
    - aws_secret_access_key is defined
    - cert_exists.stat.islnk is not defined

- name: Allow installer access to ssl certs
  file:
    path: "{{ item }}"
    state: directory
    mode: 0705
  with_items:
    - /etc/letsencrypt/live
    - /etc/letsencrypt/archive

- name: Allow installer access to ssl key
  file:
    path: "/etc/letsencrypt/archive/{{ api_fqdn }}/privkey1.pem"
    state: file
    mode: 0704

- name: generate ocp admin password
  command: htpasswd -n -b admin "{{ ocp_admin_pw }}"
  register: htpasswd_entry

- name: put admin password into variable
  set_fact:
    admin_pw_hash: "{{ htpasswd_entry.stdout.split(':')[1] }}"

- name: Create Inventory file
  template:
    src: hosts.j2
    dest: /etc/ansible/hosts

- name: Build hosts file
  lineinfile:
    dest=/etc/hosts
    regexp='.*{{ item.key }}$' line="{{ item.value.address }} {{ item.key }}"
    state=present
  with_dict: "{{ virtual_machines }}"

- name: prepare NFS share
  filesystem:
    fstype: xfs
    dev: /dev/vdb
  when: pv_source == 'nfs'

- name: Create exports dir
  file:
    path: /srv/nfs
    state: directory
  when: pv_source == 'nfs'

- name: Mount new disk to mount point
  mount:
    path: /srv/nfs
    src: /dev/vdb
    fstype: xfs
    state: mounted
  when: pv_source == 'nfs'

- name: configure nfs ports 111,2049 to iptables
  iptables:
    chain: INPUT
    protocol: tcp
    destination_port: "{{item}}"
    jump: ACCEPT
    comment: "Accept trafic to {{item}}"
  with_items:
  - 111
  - 2049

- name: ensure reguired package are installed
  vars:
    pkgs:
      - nfs-utils
      - rpcbind
  package:
    name: "{{pkgs}}"
    state: latest
  when: pv_source == 'nfs'

- name: ensure reguired services are running
  service:
    name: "{{item}}"
    state: restarted
    enabled: yes
  with_items:
  - rpcbind
  - nfs-server
  when: pv_source == 'nfs'

- name: ensure openshift-ansible.exports file present
  file:
    path: /etc/exports.d/openshift-ansible.exports
    state: touch
  when: pv_source == 'nfs'

- name: "Setup NFS exports"
  lineinfile:
    dest: /etc/exports.d/openshift-ansible.exports
    state: present
    line: "/srv/nfs/pv{{item.name}} *(rw,root_squash,no_wdelay)"
  with_items:
  - "{{nfs_pvs}}"
  when: pv_source == 'nfs'

- name: "Create directories"
  file:
    path: "/srv/nfs/pv{{item.name}}"
    state: directory
    owner: nfsnobody
    group: nfsnobody
    mode: 0777
  with_items:
  - "{{nfs_pvs}}"
  when: pv_source == 'nfs'

- name: Refresh nfs exports
  command: exportfs -ra
  when: pv_source == 'nfs'
