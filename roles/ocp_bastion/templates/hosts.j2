# Create an OSEv3 group that contains the masters and nodes groups
# For highly available load balancer a custom setup is needed, see
# for example https://github.com/openshift/openshift-ansible/blob/master/inventory/hosts.example
[OSEv3:children]
masters
nodes
etcd
{% if pv_source == 'nfs' %}
nfs
{% endif %}
{% if pv_source == 'cns' %}
glusterfs
{% endif %}


# Set variables common for all OSEv3 hosts
[OSEv3:vars]
ansible_ssh_user=cloud-user
ansible_become=true

# https://github.com/openshift/openshift-ansible/blob/master/DEPLOYMENT_TYPES.md
deployment_type=openshift-enterprise
containerized=false
oreg_url=registry.redhat.io/openshift3/ose-${component}:${version}
oreg_auth_user={{rh_oreg_user}}
oreg_auth_password={{rh_oreg_token}}

# Skip env validation
openshift_disable_check=disk_availability,memory_availability,docker_storage,docker_storage_driver,docker_image_availability

# Configure usage of openshift_clock role.
openshift_clock_enabled=true

# Set upgrade restart mode for full system restarts
openshift_rolling_restart_mode=system

# Enable cockpit
osm_use_cockpit=true
osm_cockpit_plugins=['cockpit-kubernetes', 'cockpit-pcp', 'setroubleshoot-server']

# Enable CRI-O
openshift_use_crio=True
openshift_use_crio_only=False
openshift_crio_enable_docker_gc=True

# Docker / Registry Configuration
openshift_docker_disable_push_dockerhub=True
openshift_docker_options="--log-driver=journald --log-level=warn --ipv6=false"
openshift_docker_insecure_registries=docker-registry.default.svc,docker-registry.default.svc.cluster.local

# Native high availability cluster method with optional load balancer.
openshift_master_cluster_method=native
openshift_master_cluster_hostname={{ master_name }}
#openshift_master_cluster_public_hostname=master.{{hostvars[ host_name ]['ansible_default_ipv4']['address']}}.nip.io
openshift_master_cluster_public_hostname={{ api_fqdn }}
openshift_master_api_port=8443
openshift_master_console_port=8443


# Configure nodeIP in the node config
# This is needed in cases where node traffic is desired to go over an
# interface other than the default network interface.

# Configure the multi-tenant SDN plugin (default is 'redhat/openshift-ovs-subnet')
os_sdn_network_plugin_name=redhat/openshift-ovs-multitenant

# Configure SDN cluster network and kubernetes service CIDR blocks. These
# network blocks should be private and should not conflict with network blocks
# in your infrastructure that pods may require access to. Can not be changed
# after deployment.
osm_cluster_network_cidr=10.1.0.0/16
openshift_portal_net=172.30.0.0/16
osm_host_subnet_length=8

# htpasswd auth
openshift_master_identity_providers=[{'name': 'htpasswd_auth', 'login': 'true', 'challenge': 'true', 'kind': 'HTPasswdPasswordIdentityProvider' }]
openshift_master_htpasswd_users={'admin': '{{admin_pw_hash}}'}

# Provide local certificate paths which will be deployed to masters
# https://docs.openshift.com/container-platform/3.11/install/configuring_inventory_file.html#advanced-install-custom-certificates
#openshift_master_named_certificates=[{"certfile": "/path/to/custom1.crt", "keyfile": "/path/to/custom1.key", "cafile": "/path/to/custom-ca1.crt"}]

openshift_master_named_certificates=[{"names": ["{{ api_fqdn }}"], "certfile": "/etc/letsencrypt/live/{{ api_fqdn }}/fullchain.pem", "keyfile": "/etc/letsencrypt/live/{{ api_fqdn }}/privkey.pem", "cafile": "/etc/letsencrypt/live/{{ api_fqdn }}/chain.pem"}]
openshift_hosted_router_certificate={"certfile": "/etc/letsencrypt/live/{{ api_fqdn }}/fullchain.pem", "keyfile": "/etc/letsencrypt/live/{{ api_fqdn }}/privkey.pem", "cafile": "/etc/letsencrypt/live/{{ api_fqdn }}/chain.pem"}
openshift_hosted_registry_routecertificates={"certfile": "/etc/letsencrypt/live/{{ api_fqdn }}/fullchain.pem", "keyfile": "/etc/letsencrypt/live/{{ api_fqdn }}/privkey.pem", "cafile": "/etc/letsencrypt/live/{{ api_fqdn }}/chain.pem"}
openshift_hosted_registry_routetermination=reencrypt

openshift_master_overwrite_named_certificates=true

#openshift_hosted_router_certificate={"certfile": "/path/to/router.crt", "keyfile": "/path/to/router.key", "cafile": "/path/to/router-ca.crt"}


# Install the openshift examples
openshift_install_examples=true
openshift_examples_modify_imagestreams=true

# Configure node kubelet arguments. pods-per-core is valid in OpenShift Origin 1.3 or OpenShift Container Platform 3.3 and later.
#openshift_node_kubelet_args={'image-gc-high-threshold': ['90'], 'image-gc-low-threshold': ['80']}

# default subdomain to use for exposed routes
#openshift_master_default_subdomain=apps.{{hostvars[ host_name ]['ansible_default_ipv4']['address']}}.nip.io
openshift_master_default_subdomain={{apps_fqdn}}

# Openshift Registry Options
openshift_hosted_registry_storage_kind=glusterfs
openshift_hosted_registry_replicas=1

#OCS
openshift_storage_glusterfs_namespace=ocs
openshift_storage_glusterfs_name=ocs
openshift_storage_glusterfs_wipe=True
openshift_storage_glusterfs_storageclass=true
openshift_storage_glusterfs_storageclass_default=true
openshift_storage_glusterfs_image=registry.redhat.io/rhgs3/rhgs-server-rhel7:v3.11
openshift_storage_glusterfs_heketi_image=registry.redhat.io/rhgs3/rhgs-volmanager-rhel7:v3.11
openshift_storage_glusterfs_block_image=registry.redhat.io/rhgs3/rhgs-gluster-block-prov-rhel7:v3.11
openshift_storage_glusterfs_s3_image=registry.redhat.io/rhgs3/rhgs-s3-server-rhel7:v3.11
openshift_storage_glusterfs_block_deploy=True
openshift_storage_glusterfs_block_host_vol_create=true
openshift_storage_glusterfs_block_host_vol_size=50
openshift_storage_glusterfs_block_storageclass=true

# Deploy Prometheus
openshift_cluster_monitoring_operator_install=true
openshift_cluster_monitoring_operator_prometheus_storage_enabled=true
openshift_cluster_monitoring_operator_alertmanager_storage_enabled=true
openshift_cluster_monitoring_operator_prometheus_storage_capacity=5Gi
openshift_cluster_monitoring_operator_node_selector={"node-role.kubernetes.io/infra":"true"}
openshift_prometheus_namespace=openshift-metrics
{% if pv_source == 'nfs' %}
openshift_prometheus_storage_kind=nfs
openshift_prometheus_alertmanager_storage_kind=nfs
openshift_prometheus_alertbuffer_storage_kind=nfs
{% endif %}
openshift_prometheus_storage_type=pvc
openshift_prometheus_alertmanager_storage_type=pvc
openshift_prometheus_alertbuffer_storage_type=pvc

# Logging deployment
openshift_logging_install_logging=false
# openshift_logging_kibana_hostname=logging.apps.{{hostvars[ host_name ]['ansible_default_ipv4']['address']}}.nip.io
openshift_logging_kibana_hostname=logging.{{apps_fqdn}}
openshift_logging_use_ops=false
#openshift_logging_public_master_url=https://master.{{hostvars[ host_name ]['ansible_default_ipv4']['address']}}.nip.io:8443
openshift_logging_public_master_url=https://{{api_fqdn}}:8443
openshift_logging_curator_default_days=7
openshift_logging_es_pvc_size=10Gi
openshift_logging_es_pvc_dynamic=true
openshift_logging_es_pvc_storage_class_name=glusterfs-ocs-block
openshift_logging_es_memory_limit=8Gi
openshift_logging_es_nodeselector={"node-role.kubernetes.io/infra":"true"}

# Enable service catalog
openshift_enable_service_catalog=true

# Enable template service broker (requires service catalog to be enabled, above)
template_service_broker_install=true

{% if pv_source == 'nfs' %}
# Setup storage for etcd2, for the new Service Broker
openshift_hosted_etcd_storage_kind=nfs
openshift_hosted_etcd_storage_nfs_options="*(rw,root_squash,sync,no_wdelay)"
openshift_hosted_etcd_storage_host={{ master_name }}
openshift_hosted_etcd_storage_nfs_directory=/exports
openshift_hosted_etcd_storage_volume_name=etcd-vol2
openshift_hosted_etcd_storage_access_modes=["ReadWriteOnce"]
openshift_hosted_etcd_storage_volume_size=1G
openshift_hosted_etcd_storage_labels={'storage': 'etcd'}
{% endif %}


# Grafana
openshift_grafana_storage_type=pvc
openshift_grafana_sc_name=glusterfs-ocs
openshift_grafana_storage_volume_size=1Gi
openshift_grafana_node_selector={"node-role.kubernetes.io/infra":"true"}

openshift_generate_no_proxy_hosts=true

# Install Operators
openshift_additional_registry_credentials=[{'host':'registry.connect.redhat.com','user':'{{rh_oreg_user}}','password':'{{rh_oreg_token}}','test_image':'mongodb/enterprise-operator:0.9.1'}]



[masters]
{{master_name}} ansible_ssh_host={{ virtual_machines[ 'ocp-master' ].address }}

[etcd]
{{master_name}} ansible_ssh_host={{ virtual_machines[ 'ocp-master' ].address }}

{% if pv_source == 'nfs' %}
[nfs]
{{ master_name }}
{% endif %}

{% if pv_source == 'cns' %}
[glusterfs]
{{master_name}} glusterfs_ip={{ virtual_machines[ 'ocp-master' ].address }} glusterfs_devices='["/dev/{{ocs_disk}}"]'
{{infra_name}}  glusterfs_ip={{ virtual_machines[ 'ocp-infra' ].address }}  glusterfs_devices='["/dev/{{ocs_disk}}"]'
{{apps1_name}}  glusterfs_ip={{ virtual_machines[ 'ocp-apps1' ].address }}  glusterfs_devices='["/dev/{{ocs_disk}}"]'
{{apps2_name}}  glusterfs_ip={{ virtual_machines[ 'ocp-apps2' ].address }}  glusterfs_devices='["/dev/{{ocs_disk}}"]'
{% endif %}


[nodes]
{{master_name}} ansible_ssh_host={{ virtual_machines[ 'ocp-master' ].address }} openshift_node_group_name=node-config-master
{{infra_name}} ansible_ssh_host={{ virtual_machines[ 'ocp-infra' ].address }} openshift_node_group_name='node-config-infra'
{{apps1_name}} ansible_ssh_host={{ virtual_machines[ 'ocp-apps1' ].address }} openshift_node_group_name='node-config-compute'
{{apps2_name}} ansible_ssh_host={{ virtual_machines[ 'ocp-apps2' ].address }} openshift_node_group_name='node-config-compute'
